import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class ExaminerServiceImplTest {
    private ExaminerServiceImpl examinerService;
    private JavaQuestionService javaQuestionService;

    @BeforeEach
    void setUp() {
        javaQuestionService = Mockito.mock(JavaQuestionService.class);
        examinerService = new ExaminerServiceImpl(javaQuestionService);
    }

    @Test
    void testGetRandomQuestionThrowsExceptionWhenNoQuestions() {
        // Arrange
        when(javaQuestionService.getAllQuestions()).thenReturn(Collections.emptyMap());

        // Assert
        assertThrows(EmptyListOfQuestions.class, () -> examinerService.getRandomQuestion());
    }

    @Test
    void testGetRandomQuestionReturnsValidIndexWhenQuestionsAvailable() {
        // Arrange
        Question question1 = new Question("What is Java?", "A programming language.");
        Question question2 = new Question("What is OOP?", "Object-Oriented Programming.");
        Map<Integer, List<Question>> questionsMap = new HashMap<>();
        questionsMap.put(1, Collections.singletonList(question1));
        questionsMap.put(2, Collections.singletonList(question2));
        when(javaQuestionService.getAllQuestions()).thenReturn(questionsMap);

        // Act
        int randomIndex = examinerService.getRandomQuestion();

        // Assert
        assertTrue(randomIndex >= 1 && randomIndex <= 2);
    }

    @Test
    void testGetQuestionsThrowsExceptionWhenRequestedAmountExceedsAvailable() {
        // Arrange
        Question question = new Question("What is Java?", "A programming language.");
        Map<Integer, List<Question>> questionsMap = new HashMap<>();
        questionsMap.put(1, Collections.singletonList(question));
        when(javaQuestionService.getAllQuestions()).thenReturn(questionsMap);

        // Assert
        assertThrows(BadRequest.class, () -> examinerService.getQuestions(2));
    }

    @Test
    void testGetQuestionsReturnsCorrectNumberOfUniqueQuestions() {
        // Arrange
        Question question1 = new Question("What is Java?", "A programming language.");
        Question question2 = new Question("What is OOP?", "Object-Oriented Programming.");
        Map<Integer, List<Question>> questionsMap = new HashMap<>();
        questionsMap.put(1, Collections.singletonList(question1));
        questionsMap.put(2, Collections.singletonList(question2));
        when(javaQuestionService.getAllQuestions()).thenReturn(questionsMap);

        // Act
        Map<Integer, Question> questions = examinerService.getQuestions(2);

        // Assert
        assertEquals(2, questions.size());
        assertTrue(questions.containsValue(question1));
        assertTrue(questions.containsValue(question2));
    }

    @Test
    void testGetQuestionsReturnsUniqueQuestions() {
        // Arrange
        Question question1 = new Question("What is Java?", "A programming language.");
        Question question2 = new Question("What is OOP?", "Object-Oriented Programming.");
        Map<Integer, List<Question>> questionsMap = new HashMap<>();
        questionsMap.put(1, Collections.singletonList(question1));
        questionsMap.put(2, Collections.singletonList(question2));
        when(javaQuestionService.getAllQuestions()).thenReturn(questionsMap);

        // Act
        Map<Integer, Question> questions = examinerService.getQuestions(2);

        // Assert
        assertEquals(2, questions.size());
        assertTrue(questions.containsValue(question1));
        assertTrue(questions.containsValue(question2));
    }

    @Test
    void testGetRandomQuestionReturnsDifferentIndexes() {
        // Arrange
        Question question1 = new Question("What is Java?", "A programming language.");
        Question question2 = new Question("What is OOP?", "Object-Oriented Programming.");
        Map<Integer, List<Question>> questionsMap = new HashMap<>();
        questionsMap.put(1, Collections.singletonList(question1));
        questionsMap.put(2, Collections.singletonList(question2));
        when(javaQuestionService.getAllQuestions()).thenReturn(questionsMap);

        // Act
        int firstIndex = examinerService.getRandomQuestion();
        int secondIndex = examinerService.getRandomQuestion();

        // Assert
        assertNotEquals(firstIndex, secondIndex);
    }
}